CODE TO GENERATE THE SQL AND LINKED-DATA VERSION OF LINKEDSPLS
Authors: Richard Boyce, Greg Gardner, Yifan Ning
Date: 6/08/2015

################################################################################
OVERVIEW
################################################################################

The University of Pittsburgh Linked Structured Product Label (SPL) repository renders sections from the package inserts (product labels) of FDA-approved drugs as published in the SPL data standard and provided by the National Library of Medicine's DailyMed resource. Currently, only data from the product labels of prescription drugs is provided. This site's SPL data is updated weekly and all SPLs retain DailyMed versioning data so that researchers can record the provenance of the text and sections they work with. The Linked SPL resource currently contains 50,000 SPLs for products containing more than 2,300 active ingredients. 


Most recent update at the time of creating this file: 
- Labels for prescription drugs downloaded from http://dailymed.nlm.nih.gov/dailymed/spl-resources.cfm   Nov 15, 2014

updated in Jun 08 2015 08:00:31 AM EST

- The file load-dailymed-spls/TableSchema.sql has the RDB schema needed to load the data. Note that, for manually way of update mappings, not all data is loaded using Python, read the rest of the README to see other data and how it is loaded. Recommended way of update and load mappings is run the ant program by following commands:


################################################################################
LOADING AND UPDATING 
################################################################################

Downloads and update latest version of data source files based on PRE-REQUISITES says
Config all paths at: data-source.properties
Config mysql db connection at : db-connection.properties


Run shell commands below to create database schema and unzip and parse dailymed XMLs and load product label sections from dailymed XMLs into Mysql Schema linkedSPLs

$ cd LinkedSPLs-update
$ ant linkedSPLs-setup

Update all linkedSPLs mappings by command below
       (1) mappings of preferred term to UNII
       (2) mappings of preferred term to ChEBI
       (3) mappings of Preferred term and Rxnorm
       (4) mappings of Preferred term, UNII and Drugbank URI
       (5) mappings of Preferred term, rxcui and Dailymed setid
       (6) mappings of RxNORM, NUI and NDFRT label
       (7) mappings of setId, UNII, NUI and PreferredNameAndRole


$ ant linkedSPLs-update


################################################################################
PRE-REQUISITES
################################################################################

Download and organize all source data files in data folder

--------------------------------------------------------
product label sections and mappings from Dailymed:
--------------------------------------------------------

(1) dailymed-labels:

Download dm_spl_release_human_rx.zip and dm_spl_release_human_otc.zip from http://dailymed.nlm.nih.gov/dailymed/spl-resources-all-drug-labels.cfm

Put in folder at "bio2rdf/linkedSPLs/LinkedSPLs-update/data/dailymed-labels/"

(2) dailymed-mappings:

Download rxnorm_mappings.zip from http://dailymed.nlm.nih.gov/dailymed/spl-resources-all-mapping-files.cfm

Put in folder at "bio2rdf/linkedSPLs/LinkedSPLs-update/data/dailymed-mappings/"

(3) dailymed-indexing:

Download pharmacologic_class_indexing_spl_files.zip from http://dailymed.nlm.nih.gov/dailymed/spl-resources-all-indexing-files.cfm

Put in folder at "bio2rdf/linkedSPLs/LinkedSPLs-update/data/dailymed-indexings/"

--------------------------------------------------------
FDA Preferred terms, UNIIs from FDA:
--------------------------------------------------------

Download from http://www.fda.gov/ForIndustry/DataStandards/StructuredProductLabeling/ucm162523.htm

(1) FDA_UNII_Names 
Downloads UNII List ('UNIIs <DATE> Names.txt' as UNII lists)

(2) UNIIs_Records 
Downloads UNII Data ('UNIIs <DATE> Records.txt' as UNII records) 

Keep in directory LinkedSPLs-update/data/FDA

Edit LinkedSPLs-update/data-source.properties to reset FDA_UNII_NAMES and FDA_UNII_RECORDS


--------------------------------------------------------
Drug bank Id from Drugbank: 
--------------------------------------------------------

Download from http://www.drugbank.ca/downloads

download drugbank.xml as drugbankX.X and keep in directory LinkedSPLs-update/data/DrugBank

--------------------------------------------------------
UMLS:
--------------------------------------------------------

Download RXNORM mappings from UMLS at "http://www.nlm.nih.gov/research/umls/rxnorm/docs/rxnormfiles.html"

keep in directory: "LinkedSPLs-update/data/UMLS"

--------------------------------------------------------
umlsdbmi:
--------------------------------------------------------
Repository: https://bitbucket.org/uamsdbmi/dron

DrOn to RxNorm and ChEBI

Dron mapping file (dron-rxnorm.owl for drug and dron-ingredient.owl for ingredients) download from:
https://bitbucket.org/uamsdbmi/dron/src

Install readland:
$ sudo apt-get install redland-utils

Load dron mapping for ingredient into a triple store by:
rdfproc -n dron parse dron-ingredient.owl

rdfproc -c dron-ingredient query sparql - '       
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX owl: <http://www.w3.org/2002/07/owl#> PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dron: <http://purl.obolibrary.org/obo/dron#>  SELECT * WHERE {   ?dron dron:DRON_00010000 ?rxcui. }' > dron-chebi-rxcui-ingredient.txt


Load dron mapping for drug product into triple store by:
rdfproc -n dron-drug parse dron-rxnorm.owl

Mappings pulled using:
rdfproc -c dron-drug query sparql - '       
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX owl: <http://www.w3.org/2002/07/owl#> PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dron: <http://purl.obolibrary.org/obo/dron#>  SELECT * WHERE {   ?dron dron:DRON_00010000 ?rxcui. }' > dron-rxcui-drug.txt

--------------------------------------------------------
OMOP concept Id from OHDSI:
--------------------------------------------------------

Download from "https://github.com/OHDSI/KnowledgeBase/tree/master/LAERTES/terminology-mappings/StandardVocabToRxNorm/imeds_drugids_to_rxcuis.csv"


################################################################################
Details for update each linkedSPLs mappings
################################################################################

-Scripts are using in Ant task linkedSPLs-setup

update_lodd_dailymed.py:
To do a full update, run update_lodd_dailymed.py directly.  This simply executes
dailymed_rss.run() and loadDailymedToSql.update() with a custom logger (update_lodd_dailymed.log)

dailymed_rss.py:
Several functions for downloading and extracting the spls updated
within the past 7 days from the rss feed
http://dailymed.nlm.nih.gov/dailymed/rss.cfm.  The feedparser module
is used to parse the rss feed.  Each entry in the feed provides a link
to an information page for the insert.  The html on this page is
parsed for the link to the zipped xml file, which is then downloaded
to a temp directory.  After all inserts in the feed have been
downloaded, the xml files are extracted into the temp directory.  If
they don't exist, the script will create two other directories in the
current directory, ./spls (holds a master set of all spls in their
most current form) and ./spls/updates (holds the spls from the most
recent execution of dailymed_rss.run()).  All files in ./spls/updates
are removed.  All xml files in the temp directory are then copied to
./spls/updates.  Finally, the temp directory and all files in it are
removed.

loadDailymedToSql.py
A number of functions for parsing spls and loading the information to
the local lodd_dailymed mysql database.  In particular, run() is used
to insert new spls into the database, and update() is used for
updating spls already in the database.  The update() function can
detect spls that are not currently in the database and send them to
run() for insertion.  The update function will also copy any updated
spls to the master ./spls directory.  It does not assume stability of
filenames, but searches for the current filename of the setid for the
insert in the database, removes that filename from ./spls and copies
the updated spl to ./spls. NOTE: if the script is ran directly, it
will truncate all SPL tables and load all SPLs in the 'spls' folder.


------------------------------------------------------------
LOADING THE FDA UNII TO CHEBI MAPPING
------------------------------------------------------------

The chemical entities in SPLs are named using Unique Ingredient
Identifiers
(UNIIs, see http://www.fda.gov/ForIndustry/DataStandards/StructuredProductLabeling/ucm162523.htm). A
mapping from the UNIIs to ChEBI PURLs has been created using the code
in the folder 'UNII-to-ChEBI-mapping.' There are two files that are
present in the database that can be used to map between active moiety
string names and ChEBI as well as UNIIs and ChEBI:

1) FDAPreferredSubstanceToUNII_03132014.txt

Load into the RDB by:

CREATE TABLE `FDAPreferredSubstanceToUNII` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `PreferredSubstance` varchar(200) NOT NULL,
  `UNII` varchar(50) NOT NULL,
  PRIMARY KEY (`id`)
) DEFAULT CHARSET=utf8;

LOAD DATA LOCAL INFILE './FDAPreferredSubstanceToUNII_03132014.txt' INTO TABLE FDAPreferredSubstanceToUNII FIELDS TERMINATED BY '\t' LINES TERMINATED BY '\n' (PreferredSubstance, UNII); 

2) FDA_UNII_to_ChEBI_03132014.txt

Load into the RDB by:

CREATE TABLE `FDA_UNII_to_ChEBI` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `PreferredSubstance` varchar(200) NOT NULL,
  `ChEBI` varchar(200) NOT NULL,
  PRIMARY KEY (`id`)
) DEFAULT CHARSET=utf8;

LOAD DATA LOCAL INFILE './FDA_UNII_to_ChEBI_03132014.txt' INTO TABLE FDA_UNII_to_ChEBI FIELDS TERMINATED BY '\t' LINES TERMINATED BY '\n' (PreferredSubstance, ChEBI); 

------------------------------------------------------------
LOADING THE FDA SUBSTANCE NAME TO DRUGBANK MAPPING  (NOTE: IGNORE UNTIL VALIDATED - 03/21/2014)
------------------------------------------------------------

The potential usability of linkeSPLs is increased by including
mappings to external sources that contain more structured knowledge
about entities identified in SPLs. DrugBank is one such resource and
the most current linked version of DrugBank is likely in the Bio2RDF
resource. However, bio2rdf uses normalized URIs (see
http://tinyurl.com/7laerbk and
http://sourceforge.net/apps/mediawiki/bio2rdf/index.php?title=Banff_Manifesto)
and some translation is required in order to contstruct federated
queries across OBO ontologies, bio2rdf, and linked SPLs. 

A validated mapping from FDA preferred substance names and UNIIs to
DrugBank was created in late September 2012. This is an initial
manually validated mapping known to be incomplete. The mapping was
done using three different methods which are described in a conference
manuscript currently under review (09/29/2012). The mapping itself is
stored in
"merged_results_with_drug_names-MANUALLY-EDITED-FINAL-VALIDATED-MAPPING-09272012.csv". The
script 'merge-chebi-and-drugbank-mapping.py' creates a table
"fda-substance-preferred-name-to-drugbank-09292012.csv" that can be
loaded into the LinkedSPLs database and mapped to RDF. Here is how to
load the mapping:

CREATE TABLE `FDA_SUBSTANCE_TO_DRUGBANK_BIO2RDF` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `PreferredSubstance` varchar(200) NOT NULL,
  `DRUGBANK_CA` varchar(200) NOT NULL, 
  `DRUGBANK_BIO2RDF` varchar(200) NOT NULL,     
  PRIMARY KEY (`id`)
) DEFAULT CHARSET=utf8;

LOAD DATA LOCAL INFILE './fda-substance-preferred-name-to-drugbank-09292012.csv' INTO TABLE FDA_SUBSTANCE_TO_DRUGBANK_BIO2RDF FIELDS TERMINATED BY '\t' LINES TERMINATED BY '\n' IGNORE 1 LINES (PreferredSubstance, DRUGBANK_CA, DRUGBANK_BIO2RDF); 


------------------------------------------------------------
LOADING THE FDA ACTIVE MOIETY TO RXNORM MAPPING
------------------------------------------------------------

FDA preferred substance names are mapped to RxNORM active ingredients
using the script in the getPreferredSubstanceRxNORM_Mapping.py located
in the RxNORM-mapping sub-folder.

NOTE: IT IS CRITICAL to re-run the scripts for generating the table
for FDA pharmacogenomic data (in sub-folder 'FDA-pharmacogenetic-info-mapping') and add the lines that the script
writes at the end of the log file to any updated rxcuis mapping file.

Load into the RDB by:

CREATE TABLE `FDAPreferredSubstanceToRxNORM` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `PreferredSubstance` varchar(200) NOT NULL,
  `RxNORM` varchar(200) NOT NULL,
  PRIMARY KEY (`id`)
) DEFAULT CHARSET=utf8;

LOAD DATA LOCAL INFILE './PreferredSubstance-to-Rxcui-mapping_03132014.txt' INTO TABLE FDAPreferredSubstanceToRxNORM FIELDS TERMINATED BY '\t' LINES TERMINATED BY '\n' (PreferredSubstance, RxNORM); 


------------------------------------------------------------------------------------------------------------------------
LOADING THE FDA SPL SETID TO RXNORM MAPPING (NOTE: load the active moiety to rxnorm mapping first!)
------------------------------------------------------------------------------------------------------------------------

FDA SPL setids are mapped to RxNORM active ingredients using the
script rxnorm-api-query-for-drug-entities-in-rxnorm.py in the
RxNORM-mapping sub-folder. NOTE: The script queries linkedSPLs for RxCUIs
for all active moieties so be sure to change the linkedSPLs SPARQL
endpoint the script uses is it is incorrect.

Load into the RDB by:

CREATE TABLE `SPLSetIDToRxNORM` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `setId` varchar(200) NOT NULL,
  `RxCUI` varchar(50) NOT NULL,
  `RxClinicalDrug` varchar(1000) NOT NULL,	
  PRIMARY KEY (`id`)
) DEFAULT CHARSET=utf8;


LOAD DATA LOCAL INFILE './converted_rxnorm_mappings_03132014.txt' INTO TABLE `SPLSetIDToRxNORM`  FIELDS TERMINATED BY '|' LINES TERMINATED BY '\n' (setId, RxCUI, RxClinicalDrug); 


------------------------------------------------------------------------------------------------------------------------
LOADING THE FDA SPL SETID TO PHARMACOGENETIC INFORMATION DATA (NOTE: load the active moiety to rxnorm mapping first!)
------------------------------------------------------------------------------------------------------------------------

 Data from the FDA's pharmacogenomic biomarker table
 <http://www.fda.gov/Drugs/ScienceResearch/ResearchAreas/Pharmacogenetics/ucm083378.htm>
 is loaded into a table format that can be used to link the data and
 SPL section date within linkedSPLs using the script
 'createFDAPharmgxDBTable.py' in the FDA-pharmacogenetic-info-mapping
 table

Load into the RDB by:

CREATE TABLE `FDAPharmgxTable` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `activeMoiety` varchar(200) NOT NULL,	
  `therapeuticApplication` varchar(500) NOT NULL,	
  `biomarker` varchar(50) NOT NULL,
  `setId` varchar(200) NOT NULL,
  `SPLSection` varchar(500) NOT NULL,	
  PRIMARY KEY (`id`)
) DEFAULT CHARSET=utf8;

LOAD DATA LOCAL INFILE './FDAPharmgxTable.csv' INTO TABLE `FDAPharmgxTable`  FIELDS TERMINATED BY '\t' LINES TERMINATED BY '\n' (activeMoiety, therapeuticApplication, biomarker, setId, SPLSection); 

The file biomarker-to-ontology-mapping.csv contains a manually created
mapping between the FDA biomarker strings, HGNC symbols, and ids in
Pharmgkb, and the PRO ontology. This mapping can be used to generate
all kinds of other mappings as well as facilitate distributed
queries. This table is loaded as follows:


CREATE TABLE `FDAPharmgxTableToOntologyMap` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `FDAReferencedSubgroup` varchar(200) NOT NULL,	
  `HGNCGeneSymbol` varchar(100),	
  `Synonymns` varchar(500) ,
  `AlleleVariant` varchar(100),
  `Pharmgkb` varchar(100),	
  `URI` varchar(200),	
  `Ontology` varchar(200),
  `CuratorComments` varchar(500),
  PRIMARY KEY (`id`)
) DEFAULT CHARSET=utf8;

LOAD DATA LOCAL INFILE './biomarker-to-ontology-mapping.csv' INTO TABLE `FDAPharmgxTableToOntologyMap`  FIELDS TERMINATED BY '\t' LINES TERMINATED BY '\n' (FDAReferencedSubgroup,HGNCGeneSymbol,Synonymns,AlleleVariant,Pharmgkb,URI,Ontology,CuratorComments); 

---------------------------
LOADING THE EPC CLASS DATA 
---------------------------

Data from DailyMed mappings to FDA Established Pharmacologic Class
(EPC) classes
<http://www.fda.gov/ForIndustry/DataStandards/StructuredProductLabeling/ucm162549.htm>
is available in the file 'EPC_extraction_most_recent.txt' in the folder
'pharmacologic_class_indexing.' Read the README in that folder. The mappings can be loaded
into linkedSPLs as follows:

CREATE TABLE `FDA_EPC_Table` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `setId` varchar(200) NOT NULL,
  `UNII` varchar(50) NOT NULL,
  `NUI` varchar(50) NOT NULL,
  `PreferredNameAndRole` varchar(300) NOT NULL,	
  PRIMARY KEY (`id`)
) DEFAULT CHARSET=utf8;

LOAD DATA LOCAL INFILE './EPC_extraction_most_recent.txt' INTO TABLE `FDA_EPC_Table` FIELDS TERMINATED BY '\t' LINES TERMINATED BY '\n' (setId, UNII, NUI, PreferredNameAndRole); 

------------------------------------------------------
LOADING THE RXNORM TO NDF-RT ACTIVE INGREDIENT MAPPING 
------------------------------------------------------

The RXNORM to NDF-RT active ingredient mapping is taken from RxNorm
RRF files. See the README in NDFRT-to-RxNorm. The mappings can be
loaded into linkedSPLs as follows:

CREATE TABLE `RXNORM_NDFRT_INGRED_Table` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `RxNORM` varchar(200) NOT NULL,
  `NUI` varchar(200) NOT NULL,
  `NDFRT_LABEL` varchar(200) NOT NULL,
  PRIMARY KEY (`id`)
) DEFAULT CHARSET=utf8;

LOAD DATA LOCAL INFILE './converted-rxnorm-to-ndfrt-chemical-ingredient-03192014.txt' INTO TABLE `RXNORM_NDFRT_INGRED_Table` FIELDS TERMINATED BY '\t' LINES TERMINATED BY '\n' (RxNORM, NUI, NDFRT_LABEL); 


------------------------------------------------------
LOADING THE OMOP Concept Id TO RxCUI MAPPING 
------------------------------------------------------

CREATE TABLE `linkedSPLs`.`OMOP_RXCUI` (
  `Id` INT NOT NULL AUTO_INCREMENT,
  `OMOPConceptId` VARCHAR(20) NOT NULL,
  `RxCUI` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`Id`));

LOAD DATA LOCAL INFILE 'data/OMOP-OHDSI/imeds_drugids_to_rxcuis.csv' INTO TABLE `OMOP_RXCUI` FIELDS TERMINATED BY '|' LINES TERMINATED BY '\n' IGNORE 1 LINES (OMOPConceptId, RxCUI);

------------------------------------------------------------
TESTING THE D2R SERVER ON THE DEVELOPMENT MACHINE
------------------------------------------------------------

cd /home/PITT/rdb20/Downloads/D2R/d2rq-0.8.1
./d2r-server --verbose -b http://130.49.206.86:2021/ -p 2021 dailymed_d2r_map_config_d2rq_8_1.n3 

------------------------------------------------------------
MOVING THE DEVELOPMENT MODE RDB DATA TO THE PUBLIC SERVER
------------------------------------------------------------

On the development server:
$ mysqldump -uroot -p --opt linkedSPLs  > /home/rdb20/mysqlbackups/linkedSPLs.sql

One the public server:
$ mysql -u root -p linkedSPLs < linkedSPLs.sql

------------------------------------------------------------
Updating the public D2R webpage to communicate changes to the sample LinkedSPLs 
------------------------------------------------------------

On the public server:
cd Downloads/d2rq-0.8.1/webapp/WEB-INF/templates

...Then edit the root_page.vm file

------------------------------------------------------------
CREATING AN RDF DUMP OF THE DATA IN THE D2R SERVER
------------------------------------------------------------

$ cd <d2r server for linkedSPLs>
$ ./dump-rdf -m <path to mapping file> -o linkedSPLs-dump.nt 

---------------------------------------------------------------------------------------
LOADING AN RDF DUMP OF THE DATA INTO VIRTUOSO (tested with OpenLink Virtuoso in Ubuntu)
---------------------------------------------------------------------------------------

Initial load:
$ isql-vt
SQL> ld_dir ('/path/to/files', '*.n3', 'http://dbpedia.org');
SQL> rdf_loader_run();
SQL> select * from DB.DBA.load_list;

Reloading (DELETE THE OLD GRAPH FIRST from Virtuoso composer!):
$ isql-vt
SQL> log_enable(3,1); # see http://www.openlinksw.com/dataspace/dav/wiki/Main/VirtTipsAndTricksGuideDeleteLargeGraphs
SQL> SPARQL CLEAR GRAPH <http://dbmi-icode-01.dbmi.pitt.edu/linkedSPLs/>;
SQL> update DB.DBA.load_list set ll_state = 0 where ll_file = '<name of RDF file>';
SQL> rdf_loader_run();
SQL> select * from DB.DBA.load_list; 

-----------

*UNII to ChEBI

Approach 1:

- Method: use Bioportal's SPARQL endpoint to identify exact string matches between the UNII preferred names and the RDF label of concepts in Bioportal

- Base folder in SVN: 
<linkedSPLs/LinkedSPLs-update/mappings/UNII-to-ChEBI-mapping>

- Date performed: 04/13/2012 and 09/14/2012

- Input: active_moieties.txt -- all unique UNII preferred names from listed in "UNIIs 2Mar2012.txt"

- Script: sparql1-for-drug-entities.py

- Results Files: FDA-UNII-to-ChEBI-bioportal-mapping-04132012.txt, FDA-UNII-to-ChEBI-bioportal-mapping-09142012.txt, FDA-UNII-to-ChEBI-bioportal-mapping-04132012-PLUS-09142012.txt

- Results (4/13/2012): 4,234 mappings

- Results (09/14/2012): 2,180 mappings

- Combined unique results: 4,411 (loaded into linkedSPLs: FDA-UNII-to-ChEBI-bioportal-mapping-04132012-PLUS-09142012.txt)

-----------


- The D2R file has the mapping from RDB tables to RDF: ../LinkedSPLs-core/linkedSPLs_dump_rdf_config.n3